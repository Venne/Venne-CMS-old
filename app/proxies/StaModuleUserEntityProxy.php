<?php

namespace App\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class StaModuleUserEntityProxy extends \StaModule\UserEntity implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function removeAssociations()
    {
        $this->__load();
        return parent::removeAssociations();
    }

    public function hasKey($key)
    {
        $this->__load();
        return parent::hasKey($key);
    }

    public function addKey($key, $val)
    {
        $this->__load();
        return parent::addKey($key, $val);
    }

    public function getIcon()
    {
        $this->__load();
        return parent::getIcon();
    }

    public function getIconUrl()
    {
        $this->__load();
        return parent::getIconUrl();
    }

    public function setIcon($file, $wwwDir = NULL)
    {
        $this->__load();
        return parent::setIcon($file, $wwwDir);
    }

    public function __get($var)
    {
        $this->__load();
        return parent::__get($var);
    }

    public function __set($var, $value)
    {
        $this->__load();
        return parent::__set($var, $value);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'author', 'enable', 'name', 'url', 'notation', 'text', 'created', 'updated', 'expired', 'news', 'articles', 'users', 'firms', 'products', 'services', 'keys', 'id', 'hisNews', 'hisArticles', 'hisFirms', 'hisProducts', 'hisServices', 'hisUsers');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}